************************************************
* Arithmetic Parser - by Andrew Sanger 3440468 *
* Version 1.1                                  *
*----------------------------------------------*
*         for Programming Project 1            *
*                  SP3 2016                    *
************************************************

PLEASE NOTE
-----------

This code is not final and can be changed if there are any issues with it. Please let me
know if there's anything that needs changing, I just used the C++ code as a basis, and went
from there.

Also, after testing this code out on different formulas I found that it tends to return
a low value most of the time (between 0 and 10).. This might not create very colourful
pictures. 

VERSION 1.1 CHANGELOG - 23 October 2016
---------------------------------------

 - Changed Parser to implement Sample Formula Generator created by Dorothea Baker.
 - Changed Code to allow for accepting strings of different spacing.
 - Changed Code to match arithmetic formatting changes in other modules.
 - Changed Parser PixelNode to accept Integers as per Callum's request, although the code
   still returns Doubles (due to returning numbers between 0 and 1)
 - Changed code to allow the random number maximum to be changed.

HOW TO USE - ARITHMETIC PARSER
------------------------------

The arithmetic parser takes a String as input and returns an ArithmeticNode object
as output. This object acts as the first or root node of a tree containing all Arithmetic
functions that will be called recursively upon a pixel's colour values.

The string contains a formula that is generated by the code, and the string format is
shown below this in the "STRING FORMAT" section.

--
To use the arithmetic parser, create a singleton instance of it using: 

	ParserInterface.getInstance()

--
If you wish to allow for testing text to be displayed in the console while using the parser
please use this function:

	ParserInterface.setTesting(true)
	
This will allow for easy bug checking..

--
(VERSION 1.1)

The default value for the random number generator is 0 to 255, but the maximum can be changed
by using the following function:

	ParserInterface.setRandMax(Integer newMaximum)
	
--
(VERSION 1.1)
If you wish to give the parser a string with different spacing than the default then please
use this function:

	ParserInterface.setSpacing(STRING_SPACING)
	
Where STRING_SPACING denotes the spacing currently being used in the String.. Please see the
"STRING SPACING" section for more information.

--
To run the parser, call the following function:

	ParserInterface.getArithmetic( <insert string object here> )
	
This will return an ArithmeticNode object. It will also throw two possible custom Exceptions
relating to validity of the string which must be handled. The two possible exceptions are:

	InvalidArgumentException - This exception is thrown when an invalid argument is in the
		string. eg, examples of valid arguments are sin, cos, tan.. examples of invalid
		arguments are sine, cosine, tangent etc.
		
	IncorrectVariablesException - This exception is thrown when an argument has either 
		too many or not enough variables in the string. eg, the plus argument must have
		2 variables eg (plus x y), while sin has 1.
		
HOW TO USE - ARITHMETIC NODE
----------------------------

The arithmetic node that is returned by the parser consists of the first node of a tree containing 
all arithmetic created by the string. To use the node to work on pixel values, you must create
two PixelNodes, one for X and one for Y. Then send these objects to the arithmetic node using
the following functions:

	ArithmeticNode.operation(xPixel, yPixel) - carries out the contained arithmetic on all
		red, green and blue values in X and Y. Returns a PixelNode object containing all three
		returned red, green and blue values.
		
	ArithmeticNode.redOperation(xPixel, yPixel)
	ArithmeticNode.greenOperation(xPixel, yPixel)
	ArithmeticNode.blueOperation(xPixel, yPixel) - carries out the contained arithmetic on either
		the red, green or blue values of the passed X and Y objects. Returns a double value
		containing colour data.

HOW TO USE - PIXEL NODE
-----------------------

The pixel node contains red, green and blue values for the current X or Y pixel. To create a
pixel node use the following constructor:

	PixelNode node = new PixelNode(redValue, greenValue, blueValue)
	
(Version 1.1)
PixelNode now accepts Integers, as well as Double values.
	
The pixelnode automatically changes any values of 0 to 1, this stops errors from occurring. No
longer changes negative values to their positive values.

STRING FORMAT
-------------

The string format in this code follows the below convention, there are no spaces between brackets 
and symbols. Although this can be changed, please see STRING SPACING section. e.g.

	(plus (mod (sin x) (minus pi y)))
	
The string can be of any size. And can consist of the following.

	1 VARIABLE ARGUMENTS eg (sqrt x)
		sqrt - square root
		sqr - to the power of 2
		cube - to the power of 3
		cbrt - cube root
		sin - sine
		cos - cosine
		tan - tangent
		log - logarithm
		
	2 VARIABLE ARGUMENTS eg (plus x y)
		add - addition
		sub - subtraction
		times - multiplication
		div - division
		mod - modulus
		
	POSSIBLE VARIABLES (minus pi rand) or (mod x y)
		x - uses the supplied xPixel object
		y - uses the supplied yPixel object
		rand - creates a PixelNode object full of random (0 - 255) numbers (255 default can be changed)
		pi - creates a PixelNode object containing pi for RGB
		
STRING SPACING
--------------

The string spacing format in this code can be of a few different varieties. The DEFAULT format is
as follows

	(tan (add (cos y) (sqr pi)))
	
To change the string spacing format in the parser, use the setSpacing(STRING_SPACING) function.

STRING_SPACING is an enum with 4 different values:

	STRING_SPACING.NONE			- (tan (add (cos y) (sqr pi))) -- CURRENT DEFAULT
	STRING_SPACING.OPEN			- ( tan ( add ( cos y) ( sqr pi))) -- Open brackets have spaces after
	STRING_SPACING.CLOSE		- (tan (add (cos y ) (sqr pi ) ) ) -- Close brackets have spaces before
	STRING_SPACING.OPEN_CLOSE	- ( tan ( add ( cos y ) ( sqr pi ) ) ) - Original string spacing
